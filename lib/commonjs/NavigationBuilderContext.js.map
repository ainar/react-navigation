{"version":3,"sources":["NavigationBuilderContext.tsx"],"names":["NavigationBuilderContext","React","createContext","trackAction","undefined"],"mappings":";;;;;;;AAAA;;;;;;AAuBA;;;AAGA,MAAMA,wBAAwB,GAAGC,KAAK,CAACC,aAAN,CAU9B;AACDC,EAAAA,WAAW,EAAE,MAAMC;AADlB,CAV8B,CAAjC;eAceJ,wB","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  NavigationAction,\r\n  NavigationState,\r\n  ParamListBase,\r\n} from '@react-navigation/routers';\r\nimport { NavigationHelpers } from './types';\r\n\r\nexport type ChildActionListener = (\r\n  action: NavigationAction,\r\n  visitedNavigators?: Set<string>\r\n) => boolean;\r\n\r\nexport type FocusedNavigationCallback<T> = (\r\n  navigation: NavigationHelpers<ParamListBase>\r\n) => T;\r\n\r\nexport type FocusedNavigationListener = <T>(\r\n  callback: FocusedNavigationCallback<T>\r\n) => { handled: boolean; result: T };\r\n\r\nexport type NavigatorStateGetter = () => NavigationState;\r\n\r\n/**\r\n * Context which holds the required helpers needed to build nested navigators.\r\n */\r\nconst NavigationBuilderContext = React.createContext<{\r\n  onAction?: (\r\n    action: NavigationAction,\r\n    visitedNavigators?: Set<string>\r\n  ) => boolean;\r\n  addActionListener?: (listener: ChildActionListener) => void;\r\n  addFocusedListener?: (listener: FocusedNavigationListener) => void;\r\n  onRouteFocus?: (key: string) => void;\r\n  addStateGetter?: (key: string, getter: NavigatorStateGetter) => void;\r\n  trackAction: (action: NavigationAction) => void;\r\n}>({\r\n  trackAction: () => undefined,\r\n});\r\n\r\nexport default NavigationBuilderContext;\r\n"]}
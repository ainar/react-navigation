{"version":3,"sources":["getPathFromState.tsx"],"names":["getPathFromState","state","options","undefined","Error","path","current","index","route","routes","currentOptions","pattern","name","nestedRouteNames","screens","nextRoute","deeperConfig","substring","config","stringify","params","Object","entries","reduce","acc","key","value","String","split","map","p","replace","startsWith","encodeURIComponent","join","param","query","queryString","slice","length"],"mappings":"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","sourcesContent":["import queryString from 'query-string';\r\nimport {\r\n  NavigationState,\r\n  PartialState,\r\n  Route,\r\n} from '@react-navigation/routers';\r\n\r\ntype State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\r\n\r\ntype StringifyConfig = Record<string, (value: any) => string>;\r\n\r\ntype Options = {\r\n  [routeName: string]:\r\n    | string\r\n    | {\r\n        path?: string;\r\n        stringify?: StringifyConfig;\r\n        screens?: Options;\r\n      };\r\n};\r\n\r\n/**\r\n * Utility to serialize a navigation state object to a path string.\r\n *\r\n * Example:\r\n * ```js\r\n * getPathFromState(\r\n *   {\r\n *     routes: [\r\n *       {\r\n *         name: 'Chat',\r\n *         params: { author: 'Jane', id: 42 },\r\n *       },\r\n *     ],\r\n *   },\r\n *   {\r\n *     Chat: {\r\n *       path: 'chat/:author/:id',\r\n *       stringify: { author: author => author.toLowerCase() }\r\n *     }\r\n *   }\r\n * )\r\n * ```\r\n *\r\n * @param state Navigation state to serialize.\r\n * @param options Extra options to fine-tune how to serialize the path.\r\n * @returns Path representing the state, e.g. /foo/bar?count=42.\r\n */\r\nexport default function getPathFromState(\r\n  state?: State,\r\n  options: Options = {}\r\n): string {\r\n  if (state === undefined) {\r\n    throw Error('NavigationState not passed');\r\n  }\r\n  let path = '/';\r\n\r\n  let current: State | undefined = state;\r\n\r\n  while (current) {\r\n    let index = typeof current.index === 'number' ? current.index : 0;\r\n    let route = current.routes[index] as Route<string> & {\r\n      state?: State;\r\n    };\r\n    let currentOptions = options;\r\n    let pattern = route.name;\r\n    // we keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\r\n    let nestedRouteNames = '';\r\n\r\n    while (route.name in currentOptions) {\r\n      if (typeof currentOptions[route.name] === 'string') {\r\n        pattern = currentOptions[route.name] as string;\r\n        break;\r\n      } else if (typeof currentOptions[route.name] === 'object') {\r\n        // if there is no `screens` property, we return pattern\r\n        if (\r\n          !(currentOptions[route.name] as {\r\n            screens: Options;\r\n          }).screens\r\n        ) {\r\n          pattern = (currentOptions[route.name] as { path: string }).path;\r\n          nestedRouteNames = `${nestedRouteNames}/${route.name}`;\r\n          break;\r\n        } else {\r\n          // if it is the end of state, we return pattern\r\n          if (route.state === undefined) {\r\n            pattern = (currentOptions[route.name] as { path: string }).path;\r\n            nestedRouteNames = `${nestedRouteNames}/${route.name}`;\r\n            break;\r\n          } else {\r\n            index =\r\n              typeof route.state.index === 'number' ? route.state.index : 0;\r\n            const nextRoute = route.state.routes[index];\r\n            const deeperConfig = (currentOptions[route.name] as {\r\n              screens: Options;\r\n            }).screens;\r\n            // if there is config for next route name, we go deeper\r\n            if (nextRoute.name in deeperConfig) {\r\n              nestedRouteNames = `${nestedRouteNames}/${route.name}`;\r\n              route = nextRoute as Route<string> & { state?: State };\r\n              currentOptions = deeperConfig;\r\n            } else {\r\n              // if not, there is no sense in going deeper in config\r\n              pattern = (currentOptions[route.name] as { path: string }).path;\r\n              nestedRouteNames = `${nestedRouteNames}/${route.name}`;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (pattern === undefined) {\r\n      // cut the first `/`\r\n      pattern = nestedRouteNames.substring(1);\r\n    }\r\n\r\n    // we don't add empty path strings to path\r\n    if (pattern !== '') {\r\n      const config =\r\n        currentOptions[route.name] !== undefined\r\n          ? (currentOptions[route.name] as { stringify?: StringifyConfig })\r\n              .stringify\r\n          : undefined;\r\n\r\n      const params = route.params\r\n        ? // Stringify all of the param values before we use them\r\n          Object.entries(route.params).reduce<{\r\n            [key: string]: string;\r\n          }>((acc, [key, value]) => {\r\n            acc[key] = config?.[key] ? config[key](value) : String(value);\r\n            return acc;\r\n          }, {})\r\n        : undefined;\r\n\r\n      if (currentOptions[route.name] !== undefined) {\r\n        path += pattern\r\n          .split('/')\r\n          .map((p) => {\r\n            const name = p.replace(/^:/, '');\r\n\r\n            // If the path has a pattern for a param, put the param in the path\r\n            if (params && name in params && p.startsWith(':')) {\r\n              const value = params[name];\r\n              // Remove the used value from the params object since we'll use the rest for query string\r\n              // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\r\n              delete params[name];\r\n              return encodeURIComponent(value);\r\n            }\r\n\r\n            return encodeURIComponent(p);\r\n          })\r\n          .join('/');\r\n      } else {\r\n        path += encodeURIComponent(route.name);\r\n      }\r\n\r\n      if (route.state) {\r\n        path += '/';\r\n      } else if (params) {\r\n        for (let param in params) {\r\n          if (params[param] === 'undefined') {\r\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\r\n            delete params[param];\r\n          }\r\n        }\r\n        const query = queryString.stringify(params);\r\n\r\n        if (query) {\r\n          path += `?${query}`;\r\n        }\r\n      }\r\n    }\r\n\r\n    current = route.state;\r\n  }\r\n\r\n  path =\r\n    path !== '/' && path.slice(path.length - 1) === '/'\r\n      ? path.slice(0, -1)\r\n      : path;\r\n\r\n  return path;\r\n}\r\n"]}
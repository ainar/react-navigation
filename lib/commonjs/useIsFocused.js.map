{"version":3,"sources":["useIsFocused.tsx"],"names":["useIsFocused","navigation","getCurrentValue","React","useCallback","isFocused","subscribe","callback","unsubscribeFocus","addListener","unsubscribeBlur"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA;;;;;AAKe,SAASA,YAAT,GAAiC;AAC9C,QAAMC,UAAU,GAAG,6BAAnB;AACA,QAAMC,eAAe,GAAGC,KAAK,CAACC,WAAN,CAAkBH,UAAU,CAACI,SAA7B,EAAwC,CAACJ,UAAD,CAAxC,CAAxB;AACA,QAAMK,SAAS,GAAGH,KAAK,CAACC,WAAN,CACfG,QAAD,IAAwC;AACtC,UAAMC,gBAAgB,GAAGP,UAAU,CAACQ,WAAX,CAAuB,OAAvB,EAAgC,MACvDF,QAAQ,CAAC,IAAD,CADe,CAAzB;AAIA,UAAMG,eAAe,GAAGT,UAAU,CAACQ,WAAX,CAAuB,MAAvB,EAA+B,MACrDF,QAAQ,CAAC,KAAD,CADc,CAAxB;AAIA,WAAO,MAAM;AACXC,MAAAA,gBAAgB;AAChBE,MAAAA,eAAe;AAChB,KAHD;AAID,GAde,EAehB,CAACT,UAAD,CAfgB,CAAlB;AAkBA,SAAO,sCAAgB;AACrBC,IAAAA,eADqB;AAErBI,IAAAA;AAFqB,GAAhB,CAAP;AAID","sourcesContent":["import * as React from 'react';\r\nimport { useSubscription } from 'use-subscription';\r\nimport useNavigation from './useNavigation';\r\n\r\n/**\r\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\r\n * This can be used if a component needs to render something based on the focus state.\r\n * It uses `use-subscription` under the hood for safer use in concurrent mode.\r\n */\r\nexport default function useIsFocused(): boolean {\r\n  const navigation = useNavigation();\r\n  const getCurrentValue = React.useCallback(navigation.isFocused, [navigation]);\r\n  const subscribe = React.useCallback(\r\n    (callback: (value: boolean) => void) => {\r\n      const unsubscribeFocus = navigation.addListener('focus', () =>\r\n        callback(true)\r\n      );\r\n\r\n      const unsubscribeBlur = navigation.addListener('blur', () =>\r\n        callback(false)\r\n      );\r\n\r\n      return () => {\r\n        unsubscribeFocus();\r\n        unsubscribeBlur();\r\n      };\r\n    },\r\n    [navigation]\r\n  );\r\n\r\n  return useSubscription({\r\n    getCurrentValue,\r\n    subscribe,\r\n  });\r\n}\r\n"]}
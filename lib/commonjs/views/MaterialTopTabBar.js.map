{"version":3,"sources":["MaterialTopTabBar.tsx"],"names":["TabBarTop","props","colors","state","navigation","descriptors","activeTintColor","text","inactiveTintColor","alpha","rgb","string","allowFontScaling","showIcon","showLabel","pressColor","iconStyle","labelStyle","indicatorStyle","style","rest","backgroundColor","primary","card","route","key","options","tabBarAccessibilityLabel","tabBarTestID","preventDefault","event","emit","type","target","canPreventDefault","defaultPrevented","focused","color","tabBarIcon","undefined","icon","styles","label","tabBarLabel","title","name","StyleSheet","create","height","width","textAlign","textTransform","fontSize","margin"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { View, Text, StyleSheet } from 'react-native';\r\nimport { TabBar } from 'react-native-tab-view';\r\nimport { Route, useTheme } from '@react-navigation/native';\r\nimport Color from 'color';\r\n\r\nimport { MaterialTopTabBarProps } from '../types';\r\n\r\nexport default function TabBarTop(props: MaterialTopTabBarProps) {\r\n  const { colors } = useTheme();\r\n\r\n  const {\r\n    state,\r\n    navigation,\r\n    descriptors,\r\n    activeTintColor = colors.text,\r\n    inactiveTintColor = Color(activeTintColor).alpha(0.5).rgb().string(),\r\n    allowFontScaling = true,\r\n    showIcon = false,\r\n    showLabel = true,\r\n    pressColor = Color(activeTintColor).alpha(0.08).rgb().string(),\r\n    iconStyle,\r\n    labelStyle,\r\n    indicatorStyle,\r\n    style,\r\n    ...rest\r\n  } = props;\r\n\r\n  return (\r\n    <TabBar\r\n      {...rest}\r\n      navigationState={state}\r\n      activeColor={activeTintColor}\r\n      inactiveColor={inactiveTintColor}\r\n      indicatorStyle={[{ backgroundColor: colors.primary }, indicatorStyle]}\r\n      style={[{ backgroundColor: colors.card }, style]}\r\n      pressColor={pressColor}\r\n      getAccessibilityLabel={({ route }) =>\r\n        descriptors[route.key].options.tabBarAccessibilityLabel\r\n      }\r\n      getTestID={({ route }) => descriptors[route.key].options.tabBarTestID}\r\n      onTabPress={({ route, preventDefault }) => {\r\n        const event = navigation.emit({\r\n          type: 'tabPress',\r\n          target: route.key,\r\n          canPreventDefault: true,\r\n        });\r\n\r\n        if (event.defaultPrevented) {\r\n          preventDefault();\r\n        }\r\n      }}\r\n      onTabLongPress={({ route }) =>\r\n        navigation.emit({\r\n          type: 'tabLongPress',\r\n          target: route.key,\r\n        })\r\n      }\r\n      renderIcon={({ route, focused, color }) => {\r\n        if (showIcon === false) {\r\n          return null;\r\n        }\r\n\r\n        const { options } = descriptors[route.key];\r\n\r\n        if (options.tabBarIcon !== undefined) {\r\n          const icon = options.tabBarIcon({ focused, color });\r\n\r\n          return <View style={[styles.icon, iconStyle]}>{icon}</View>;\r\n        }\r\n\r\n        return null;\r\n      }}\r\n      renderLabel={({ route, focused, color }) => {\r\n        if (showLabel === false) {\r\n          return null;\r\n        }\r\n\r\n        const { options } = descriptors[route.key];\r\n        const label =\r\n          options.tabBarLabel !== undefined\r\n            ? options.tabBarLabel\r\n            : options.title !== undefined\r\n            ? options.title\r\n            : (route as Route<string>).name;\r\n\r\n        if (typeof label === 'string') {\r\n          return (\r\n            <Text\r\n              style={[styles.label, { color }, labelStyle]}\r\n              allowFontScaling={allowFontScaling}\r\n            >\r\n              {label}\r\n            </Text>\r\n          );\r\n        }\r\n\r\n        return label({ focused, color });\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  icon: {\r\n    height: 24,\r\n    width: 24,\r\n  },\r\n  label: {\r\n    textAlign: 'center',\r\n    textTransform: 'uppercase',\r\n    fontSize: 13,\r\n    margin: 4,\r\n    backgroundColor: 'transparent',\r\n  },\r\n});\r\n"]}
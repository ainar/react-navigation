{"version":3,"sources":["MaterialTopTabView.tsx"],"names":["MaterialTopTabView","pager","lazyPlaceholder","tabBar","props","tabBarOptions","state","navigation","descriptors","sceneContainerStyle","rest","colors","renderTabBar","index","dispatch","TabActions","jumpTo","routes","name","target","key","route","render","emit","type","backgroundColor","background"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAMA;;;;;;;;;;;;;;;;;;;;AAee,SAASA,kBAAT,OAUL;AAAA,MAViC;AACzCC,IAAAA,KADyC;AAEzCC,IAAAA,eAFyC;AAGzCC,IAAAA,MAAM,GAAIC,KAAD,iBAAmC,oBAAC,0BAAD,EAAuBA,KAAvB,CAHH;AAIzCC,IAAAA,aAJyC;AAKzCC,IAAAA,KALyC;AAMzCC,IAAAA,UANyC;AAOzCC,IAAAA,WAPyC;AAQzCC,IAAAA;AARyC,GAUjC;AAAA,MADLC,IACK;;AACR,QAAM;AAAEC,IAAAA;AAAF,MAAa,uBAAnB;;AAEA,QAAMC,YAAY,GAAIR,KAAD,IAA+B;AAClD,WAAOD,MAAM,mBACRE,aADQ,MAERD,KAFQ;AAGXE,MAAAA,KAAK,EAAEA,KAHI;AAIXC,MAAAA,UAAU,EAAEA,UAJD;AAKXC,MAAAA,WAAW,EAAEA;AALF,OAAb;AAOD,GARD;;AAUA,sBACE,oBAAC,2BAAD,eACME,IADN;AAEE,IAAA,aAAa,EAAGG,KAAD,IACbN,UAAU,CAACO,QAAX,mBACKC,mBAAWC,MAAX,CAAkBV,KAAK,CAACW,MAAN,CAAaJ,KAAb,EAAoBK,IAAtC,CADL;AAEEC,MAAAA,MAAM,EAAEb,KAAK,CAACc;AAFhB,OAHJ;AAQE,IAAA,WAAW,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAeb,WAAW,CAACa,KAAK,CAACD,GAAP,CAAX,CAAuBE,MAAvB,EAR9B;AASE,IAAA,eAAe,EAAEhB,KATnB;AAUE,IAAA,YAAY,EAAEM,YAVhB;AAWE,IAAA,WAAW,EAAEX,KAXf;AAYE,IAAA,qBAAqB,EAAEC,eAZzB;AAaE,IAAA,YAAY,EAAE,MAAMK,UAAU,CAACgB,IAAX,CAAgB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAhB,CAbtB;AAcE,IAAA,UAAU,EAAE,MAAMjB,UAAU,CAACgB,IAAX,CAAgB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAhB,CAdpB;AAeE,IAAA,mBAAmB,EAAE,CACnB;AAAEC,MAAAA,eAAe,EAAEd,MAAM,CAACe;AAA1B,KADmB,EAEnBjB,mBAFmB;AAfvB,KADF;AAsBD","sourcesContent":["import * as React from 'react';\r\nimport { TabView, SceneRendererProps } from 'react-native-tab-view';\r\nimport {\r\n  TabNavigationState,\r\n  TabActions,\r\n  useTheme,\r\n} from '@react-navigation/native';\r\n\r\nimport MaterialTopTabBar from './MaterialTopTabBar';\r\nimport {\r\n  MaterialTopTabDescriptorMap,\r\n  MaterialTopTabNavigationConfig,\r\n  MaterialTopTabNavigationHelpers,\r\n  MaterialTopTabBarProps,\r\n} from '../types';\r\n\r\ntype Props = MaterialTopTabNavigationConfig & {\r\n  state: TabNavigationState;\r\n  navigation: MaterialTopTabNavigationHelpers;\r\n  descriptors: MaterialTopTabDescriptorMap;\r\n  tabBarPosition?: 'top' | 'bottom';\r\n};\r\n\r\nexport default function MaterialTopTabView({\r\n  pager,\r\n  lazyPlaceholder,\r\n  tabBar = (props: MaterialTopTabBarProps) => <MaterialTopTabBar {...props} />,\r\n  tabBarOptions,\r\n  state,\r\n  navigation,\r\n  descriptors,\r\n  sceneContainerStyle,\r\n  ...rest\r\n}: Props) {\r\n  const { colors } = useTheme();\r\n\r\n  const renderTabBar = (props: SceneRendererProps) => {\r\n    return tabBar({\r\n      ...tabBarOptions,\r\n      ...props,\r\n      state: state,\r\n      navigation: navigation,\r\n      descriptors: descriptors,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <TabView\r\n      {...rest}\r\n      onIndexChange={(index) =>\r\n        navigation.dispatch({\r\n          ...TabActions.jumpTo(state.routes[index].name),\r\n          target: state.key,\r\n        })\r\n      }\r\n      renderScene={({ route }) => descriptors[route.key].render()}\r\n      navigationState={state}\r\n      renderTabBar={renderTabBar}\r\n      renderPager={pager}\r\n      renderLazyPlaceholder={lazyPlaceholder}\r\n      onSwipeStart={() => navigation.emit({ type: 'swipeStart' })}\r\n      onSwipeEnd={() => navigation.emit({ type: 'swipeEnd' })}\r\n      sceneContainerStyle={[\r\n        { backgroundColor: colors.background },\r\n        sceneContainerStyle,\r\n      ]}\r\n    />\r\n  );\r\n}\r\n"]}
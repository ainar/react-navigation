{"version":3,"sources":["BaseRouter.tsx"],"names":["nanoid","BaseRouter","getStateForAction","state","action","type","index","source","routes","findIndex","r","key","map","i","params","payload","nextState","length","some","route","routeNames","includes","name","stale","shouldActionChangeFocus"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,mBAAvB;;AAGA;;;;AAIA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,iBAAiB,CACfC,KADe,EAEfC,MAFe,EAGqB;AACpC,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,YAAL;AAAmB;AACjB,gBAAMC,KAAK,GAAGF,MAAM,CAACG,MAAP,GACVJ,KAAK,CAACK,MAAN,CAAaC,SAAb,CAAwBC,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAUP,MAAM,CAACG,MAA/C,CADU,GAEVJ,KAAK,CAACG,KAFV;;AAIA,cAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,mBAAO,IAAP;AACD;;AAED,mCACKH,KADL;AAEEK,YAAAA,MAAM,EAAEL,KAAK,CAACK,MAAN,CAAaI,GAAb,CAAiB,CAACF,CAAD,EAAIG,CAAJ,KACvBA,CAAC,KAAKP,KAAN,qBACSI,CADT;AACYI,cAAAA,MAAM,oBAAOJ,CAAC,CAACI,MAAT,MAAoBV,MAAM,CAACW,OAAP,CAAeD,MAAnC;AADlB,iBAEIJ,CAHE;AAFV;AAQD;;AAED,WAAK,OAAL;AAAc;AACZ,gBAAMM,SAAS,GAAGZ,MAAM,CAACW,OAAzB;;AAEA,cACEC,SAAS,CAACR,MAAV,CAAiBS,MAAjB,KAA4B,CAA5B,IACAD,SAAS,CAACR,MAAV,CAAiBU,IAAjB,CACGC,KAAD,IAA6B,CAAChB,KAAK,CAACiB,UAAN,CAAiBC,QAAjB,CAA0BF,KAAK,CAACG,IAAhC,CADhC,CAFF,EAKE;AACA,mBAAO,IAAP;AACD;;AAED,cAAIN,SAAS,CAACO,KAAV,KAAoB,KAAxB,EAA+B;AAC7B,gBACEpB,KAAK,CAACiB,UAAN,CAAiBH,MAAjB,KAA4BD,SAAS,CAACI,UAAV,CAAqBH,MAAjD,IACAD,SAAS,CAACI,UAAV,CAAqBF,IAArB,CACGI,IAAD,IAAU,CAACnB,KAAK,CAACiB,UAAN,CAAiBC,QAAjB,CAA0BC,IAA1B,CADb,CAFF,EAKE;AACA,qBAAO,IAAP;AACD;;AAED,qCACKN,SADL;AAEER,cAAAA,MAAM,EAAEQ,SAAS,CAACR,MAAV,CAAiBI,GAAjB,CAAsBO,KAAD,IAC3BA,KAAK,CAACR,GAAN,GAAYQ,KAAZ,qBAAyBA,KAAzB;AAAgCR,gBAAAA,GAAG,YAAKQ,KAAK,CAACG,IAAX,cAAmBtB,MAAM,EAAzB;AAAnC,gBADM;AAFV;AAMD;;AAED,iBAAOgB,SAAP;AACD;;AAED;AACE,eAAO,IAAP;AAtDJ;AAwDD,GA7DgB;;AA+DjBQ,EAAAA,uBAAuB,CAACpB,MAAD,EAAiC;AACtD,WAAOA,MAAM,CAACC,IAAP,KAAgB,UAAvB;AACD;;AAjEgB,CAAnB;AAoEA,eAAeJ,UAAf","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\r\nimport { CommonNavigationAction, NavigationState, PartialState } from './types';\r\n\r\n/**\r\n * Base router object that can be used when writing custom routers.\r\n * This provides few helper methods to handle common actions such as `RESET`.\r\n */\r\nconst BaseRouter = {\r\n  getStateForAction<State extends NavigationState>(\r\n    state: State,\r\n    action: CommonNavigationAction\r\n  ): State | PartialState<State> | null {\r\n    switch (action.type) {\r\n      case 'SET_PARAMS': {\r\n        const index = action.source\r\n          ? state.routes.findIndex((r) => r.key === action.source)\r\n          : state.index;\r\n\r\n        if (index === -1) {\r\n          return null;\r\n        }\r\n\r\n        return {\r\n          ...state,\r\n          routes: state.routes.map((r, i) =>\r\n            i === index\r\n              ? { ...r, params: { ...r.params, ...action.payload.params } }\r\n              : r\r\n          ),\r\n        };\r\n      }\r\n\r\n      case 'RESET': {\r\n        const nextState = action.payload as State | PartialState<State>;\r\n\r\n        if (\r\n          nextState.routes.length === 0 ||\r\n          nextState.routes.some(\r\n            (route: { name: string }) => !state.routeNames.includes(route.name)\r\n          )\r\n        ) {\r\n          return null;\r\n        }\r\n\r\n        if (nextState.stale === false) {\r\n          if (\r\n            state.routeNames.length !== nextState.routeNames.length ||\r\n            nextState.routeNames.some(\r\n              (name) => !state.routeNames.includes(name)\r\n            )\r\n          ) {\r\n            return null;\r\n          }\r\n\r\n          return {\r\n            ...nextState,\r\n            routes: nextState.routes.map((route) =>\r\n              route.key ? route : { ...route, key: `${route.name}-${nanoid()}` }\r\n            ),\r\n          };\r\n        }\r\n\r\n        return nextState;\r\n      }\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  },\r\n\r\n  shouldActionChangeFocus(action: CommonNavigationAction) {\r\n    return action.type === 'NAVIGATE';\r\n  },\r\n};\r\n\r\nexport default BaseRouter;\r\n"]}
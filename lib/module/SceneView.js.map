{"version":3,"sources":["SceneView.tsx"],"names":["React","NavigationStateContext","NavigationContext","NavigationRouteContext","StaticContainer","EnsureSingleNavigator","SceneView","screen","route","navigation","getState","setState","navigatorKeyRef","useRef","getKey","useCallback","current","setKey","key","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","map","context","useMemo","name","component","children"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  Route,\r\n  ParamListBase,\r\n  NavigationState,\r\n  PartialState,\r\n} from '@react-navigation/routers';\r\nimport { NavigationStateContext } from './BaseNavigationContainer';\r\nimport NavigationContext from './NavigationContext';\r\nimport NavigationRouteContext from './NavigationRouteContext';\r\nimport StaticContainer from './StaticContainer';\r\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\r\nimport { NavigationProp, RouteConfig, EventMapBase } from './types';\r\n\r\ntype Props<\r\n  State extends NavigationState,\r\n  ScreenOptions extends object,\r\n  EventMap extends EventMapBase\r\n> = {\r\n  screen: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\r\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\r\n  route: Route<string> & {\r\n    state?: NavigationState | PartialState<NavigationState>;\r\n  };\r\n  getState: () => State;\r\n  setState: (state: State) => void;\r\n};\r\n\r\n/**\r\n * Component which takes care of rendering the screen for a route.\r\n * It provides all required contexts and applies optimizations when applicable.\r\n */\r\nexport default function SceneView<\r\n  State extends NavigationState,\r\n  ScreenOptions extends object,\r\n  EventMap extends EventMapBase\r\n>({\r\n  screen,\r\n  route,\r\n  navigation,\r\n  getState,\r\n  setState,\r\n}: Props<State, ScreenOptions, EventMap>) {\r\n  const navigatorKeyRef = React.useRef<string | undefined>();\r\n\r\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\r\n\r\n  const setKey = React.useCallback((key: string) => {\r\n    navigatorKeyRef.current = key;\r\n  }, []);\r\n\r\n  const getCurrentState = React.useCallback(() => {\r\n    const state = getState();\r\n    const currentRoute = state.routes.find((r) => r.key === route.key);\r\n\r\n    return currentRoute ? currentRoute.state : undefined;\r\n  }, [getState, route.key]);\r\n\r\n  const setCurrentState = React.useCallback(\r\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\r\n      const state = getState();\r\n\r\n      setState({\r\n        ...state,\r\n        routes: state.routes.map((r) =>\r\n          r.key === route.key ? { ...r, state: child } : r\r\n        ),\r\n      });\r\n    },\r\n    [getState, route.key, setState]\r\n  );\r\n\r\n  const context = React.useMemo(\r\n    () => ({\r\n      state: route.state,\r\n      getState: getCurrentState,\r\n      setState: setCurrentState,\r\n      getKey,\r\n      setKey,\r\n    }),\r\n    [getCurrentState, getKey, route.state, setCurrentState, setKey]\r\n  );\r\n\r\n  return (\r\n    <NavigationContext.Provider value={navigation}>\r\n      <NavigationRouteContext.Provider value={route}>\r\n        <NavigationStateContext.Provider value={context}>\r\n          <EnsureSingleNavigator>\r\n            <StaticContainer\r\n              name={screen.name}\r\n              // @ts-ignore\r\n              render={screen.component || screen.children}\r\n              navigation={navigation}\r\n              route={route}\r\n            >\r\n              {'component' in screen && screen.component !== undefined ? (\r\n                // @ts-ignore\r\n                <screen.component navigation={navigation} route={route} />\r\n              ) : 'children' in screen && screen.children !== undefined ? (\r\n                // @ts-ignore\r\n                screen.children({ navigation, route })\r\n              ) : null}\r\n            </StaticContainer>\r\n          </EnsureSingleNavigator>\r\n        </NavigationStateContext.Provider>\r\n      </NavigationRouteContext.Provider>\r\n    </NavigationContext.Provider>\r\n  );\r\n}\r\n"]}
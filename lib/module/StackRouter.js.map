{"version":3,"sources":["StackRouter.tsx"],"names":["nanoid","BaseRouter","StackActions","replace","name","params","type","payload","push","pop","count","popToTop","StackRouter","options","router","getInitialState","routeNames","routeParamList","initialRouteName","undefined","includes","stale","key","index","routes","getRehydratedState","partialState","state","filter","route","map","length","getStateForRouteNamesChange","Math","min","getStateForRouteFocus","findIndex","r","slice","getStateForAction","action","target","source","i","max","concat","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\r\nimport BaseRouter from './BaseRouter';\r\nimport {\r\n  NavigationState,\r\n  CommonNavigationAction,\r\n  Router,\r\n  DefaultRouterOptions,\r\n  Route,\r\n  ParamListBase,\r\n} from './types';\r\n\r\nexport type StackActionType =\r\n  | {\r\n      type: 'REPLACE';\r\n      payload: { name: string; key?: string | undefined; params?: object };\r\n      source?: string;\r\n      target?: string;\r\n    }\r\n  | {\r\n      type: 'PUSH';\r\n      payload: { name: string; key?: string | undefined; params?: object };\r\n      source?: string;\r\n      target?: string;\r\n    }\r\n  | {\r\n      type: 'POP';\r\n      payload: { count: number };\r\n      source?: string;\r\n      target?: string;\r\n    }\r\n  | {\r\n      type: 'POP_TO_TOP';\r\n      source?: string;\r\n      target?: string;\r\n    };\r\n\r\nexport type StackRouterOptions = DefaultRouterOptions;\r\n\r\nexport type StackNavigationState = NavigationState & {\r\n  /**\r\n   * Type of the router, in this case, it's stack.\r\n   */\r\n  type: 'stack';\r\n};\r\n\r\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\r\n  /**\r\n   * Replace the current route with a new one.\r\n   *\r\n   * @param name Route name of the new route.\r\n   * @param [params] Params object for the new route.\r\n   */\r\n  replace<RouteName extends keyof ParamList>(\r\n    ...args: ParamList[RouteName] extends undefined\r\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\r\n      : [RouteName, ParamList[RouteName]]\r\n  ): void;\r\n\r\n  /**\r\n   * Push a new screen onto the stack.\r\n   *\r\n   * @param name Name of the route for the tab.\r\n   * @param [params] Params object for the route.\r\n   */\r\n  push<RouteName extends keyof ParamList>(\r\n    ...args: ParamList[RouteName] extends undefined | any\r\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\r\n      : [RouteName, ParamList[RouteName]]\r\n  ): void;\r\n\r\n  /**\r\n   * Pop a screen from the stack.\r\n   */\r\n  pop(count?: number): void;\r\n\r\n  /**\r\n   * Pop to the first route in the stack, dismissing all other screens.\r\n   */\r\n  popToTop(): void;\r\n};\r\n\r\nexport const StackActions = {\r\n  replace(name: string, params?: object): StackActionType {\r\n    return { type: 'REPLACE', payload: { name, params } };\r\n  },\r\n  push(name: string, params?: object): StackActionType {\r\n    return { type: 'PUSH', payload: { name, params } };\r\n  },\r\n  pop(count: number = 1): StackActionType {\r\n    return { type: 'POP', payload: { count } };\r\n  },\r\n  popToTop(): StackActionType {\r\n    return { type: 'POP_TO_TOP' };\r\n  },\r\n};\r\n\r\nexport default function StackRouter(options: StackRouterOptions) {\r\n  const router: Router<\r\n    StackNavigationState,\r\n    CommonNavigationAction | StackActionType\r\n  > = {\r\n    ...BaseRouter,\r\n\r\n    type: 'stack',\r\n\r\n    getInitialState({ routeNames, routeParamList }) {\r\n      const initialRouteName =\r\n        options.initialRouteName !== undefined &&\r\n        routeNames.includes(options.initialRouteName)\r\n          ? options.initialRouteName\r\n          : routeNames[0];\r\n\r\n      return {\r\n        stale: false,\r\n        type: 'stack',\r\n        key: `stack-${nanoid()}`,\r\n        index: 0,\r\n        routeNames,\r\n        routes: [\r\n          {\r\n            key: `${initialRouteName}-${nanoid()}`,\r\n            name: initialRouteName,\r\n            params: routeParamList[initialRouteName],\r\n          },\r\n        ],\r\n      };\r\n    },\r\n\r\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\r\n      let state = partialState;\r\n\r\n      if (state.stale === false) {\r\n        return state;\r\n      }\r\n\r\n      const routes = state.routes\r\n        .filter((route) => routeNames.includes(route.name))\r\n        .map(\r\n          (route) =>\r\n            ({\r\n              ...route,\r\n              key: route.key || `${route.name}-${nanoid()}`,\r\n              params:\r\n                routeParamList[route.name] !== undefined\r\n                  ? {\r\n                      ...routeParamList[route.name],\r\n                      ...route.params,\r\n                    }\r\n                  : route.params,\r\n            } as Route<string>)\r\n        );\r\n\r\n      if (routes.length === 0) {\r\n        const initialRouteName =\r\n          options.initialRouteName !== undefined\r\n            ? options.initialRouteName\r\n            : routeNames[0];\r\n\r\n        routes.push({\r\n          key: `${initialRouteName}-${nanoid()}`,\r\n          name: initialRouteName,\r\n          params: routeParamList[initialRouteName],\r\n        });\r\n      }\r\n\r\n      return {\r\n        stale: false,\r\n        type: 'stack',\r\n        key: `stack-${nanoid()}`,\r\n        index: routes.length - 1,\r\n        routeNames,\r\n        routes,\r\n      };\r\n    },\r\n\r\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\r\n      const routes = state.routes.filter((route) =>\r\n        routeNames.includes(route.name)\r\n      );\r\n\r\n      if (routes.length === 0) {\r\n        const initialRouteName =\r\n          options.initialRouteName !== undefined &&\r\n          routeNames.includes(options.initialRouteName)\r\n            ? options.initialRouteName\r\n            : routeNames[0];\r\n\r\n        routes.push({\r\n          key: `${initialRouteName}-${nanoid()}`,\r\n          name: initialRouteName,\r\n          params: routeParamList[initialRouteName],\r\n        });\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        routeNames,\r\n        routes,\r\n        index: Math.min(state.index, routes.length - 1),\r\n      };\r\n    },\r\n\r\n    getStateForRouteFocus(state, key) {\r\n      const index = state.routes.findIndex((r) => r.key === key);\r\n\r\n      if (index === -1 || index === state.index) {\r\n        return state;\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        index,\r\n        routes: state.routes.slice(0, index + 1),\r\n      };\r\n    },\r\n\r\n    getStateForAction(state, action, options) {\r\n      const { routeParamList } = options;\r\n\r\n      switch (action.type) {\r\n        case 'REPLACE': {\r\n          const index =\r\n            action.target === state.key && action.source\r\n              ? state.routes.findIndex((r) => r.key === action.source)\r\n              : state.index;\r\n\r\n          if (index === -1) {\r\n            return null;\r\n          }\r\n\r\n          const { name, key, params } = action.payload;\r\n\r\n          if (!state.routeNames.includes(name)) {\r\n            return null;\r\n          }\r\n\r\n          return {\r\n            ...state,\r\n            routes: state.routes.map((route, i) =>\r\n              i === index\r\n                ? {\r\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\r\n                    name,\r\n                    params:\r\n                      routeParamList[name] !== undefined\r\n                        ? {\r\n                            ...routeParamList[name],\r\n                            ...params,\r\n                          }\r\n                        : params,\r\n                  }\r\n                : route\r\n            ),\r\n          };\r\n        }\r\n\r\n        case 'PUSH':\r\n          if (state.routeNames.includes(action.payload.name)) {\r\n            return {\r\n              ...state,\r\n              index: state.index + 1,\r\n              routes: [\r\n                ...state.routes,\r\n                {\r\n                  key:\r\n                    action.payload.key === undefined\r\n                      ? `${action.payload.name}-${nanoid()}`\r\n                      : action.payload.key,\r\n                  name: action.payload.name,\r\n                  params:\r\n                    routeParamList[action.payload.name] !== undefined\r\n                      ? {\r\n                          ...routeParamList[action.payload.name],\r\n                          ...action.payload.params,\r\n                        }\r\n                      : action.payload.params,\r\n                },\r\n              ],\r\n            };\r\n          }\r\n\r\n          return null;\r\n\r\n        case 'POP': {\r\n          const index =\r\n            action.target === state.key && action.source\r\n              ? state.routes.findIndex((r) => r.key === action.source)\r\n              : state.index;\r\n\r\n          if (index > 0) {\r\n            const count = Math.max(index - action.payload.count + 1, 1);\r\n            const routes = state.routes\r\n              .slice(0, count)\r\n              .concat(state.routes.slice(index + 1));\r\n\r\n            return {\r\n              ...state,\r\n              index: routes.length - 1,\r\n              routes,\r\n            };\r\n          }\r\n\r\n          return null;\r\n        }\r\n\r\n        case 'POP_TO_TOP':\r\n          return router.getStateForAction(\r\n            state,\r\n            {\r\n              type: 'POP',\r\n              payload: { count: state.routes.length - 1 },\r\n            },\r\n            options\r\n          );\r\n\r\n        case 'NAVIGATE':\r\n          if (\r\n            action.payload.key ||\r\n            (action.payload.name &&\r\n              state.routeNames.includes(action.payload.name))\r\n          ) {\r\n            // If the route already exists, navigate to that\r\n            let index = -1;\r\n\r\n            if (\r\n              (state.routes[state.index].name === action.payload.name &&\r\n                action.payload.key === undefined) ||\r\n              state.routes[state.index].key === action.payload.key\r\n            ) {\r\n              index = state.index;\r\n            } else {\r\n              for (let i = state.routes.length - 1; i >= 0; i--) {\r\n                if (\r\n                  (state.routes[i].name === action.payload.name &&\r\n                    action.payload.key === undefined) ||\r\n                  state.routes[i].key === action.payload.key\r\n                ) {\r\n                  index = i;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (\r\n              index === -1 &&\r\n              action.payload.key &&\r\n              action.payload.name === undefined\r\n            ) {\r\n              return null;\r\n            }\r\n\r\n            if (index === -1 && action.payload.name !== undefined) {\r\n              return router.getStateForAction(\r\n                state,\r\n                {\r\n                  type: 'PUSH',\r\n                  payload: {\r\n                    key: action.payload.key,\r\n                    name: action.payload.name,\r\n                    params: action.payload.params,\r\n                  },\r\n                },\r\n                options\r\n              );\r\n            }\r\n\r\n            return {\r\n              ...state,\r\n              index,\r\n              routes: [\r\n                ...state.routes.slice(0, index),\r\n                action.payload.params !== undefined\r\n                  ? {\r\n                      ...state.routes[index],\r\n                      params: {\r\n                        ...state.routes[index].params,\r\n                        ...action.payload.params,\r\n                      },\r\n                    }\r\n                  : state.routes[index],\r\n              ],\r\n            };\r\n          }\r\n\r\n          return null;\r\n\r\n        case 'GO_BACK':\r\n          if (state.index > 0) {\r\n            return router.getStateForAction(\r\n              state,\r\n              {\r\n                type: 'POP',\r\n                payload: { count: 1 },\r\n                target: action.target,\r\n                source: action.source,\r\n              },\r\n              options\r\n            );\r\n          }\r\n\r\n          return null;\r\n\r\n        default:\r\n          return BaseRouter.getStateForAction(state, action);\r\n      }\r\n    },\r\n\r\n    actionCreators: StackActions,\r\n  };\r\n\r\n  return router;\r\n}\r\n"]}
{"version":3,"sources":["getActionFromState.tsx"],"names":["getActionFromState","state","routes","length","undefined","route","payload","name","params","current","initial","screen","type"],"mappings":";;;;;;AAaA,eAAe,SAASA,kBAAT,CACbC,KADa,EAEe;AAC5B,MAAIA,KAAK,CAACC,MAAN,CAAaC,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,WAAOC,SAAP;AACD,GAH2B,CAK5B;AACA;;;AACA,MAAIC,KAAK,GAAGJ,KAAK,CAACC,MAAN,CAAaD,KAAK,CAACC,MAAN,CAAaC,MAAb,GAAsB,CAAnC,CAAZ;AAEA,MAAIG,OAAiD,GAAG;AACtDC,IAAAA,IAAI,EAAEF,KAAK,CAACE,IAD0C;AAEtDC,IAAAA,MAAM,oBAAOH,KAAK,CAACG,MAAb;AAFgD,GAAxD;AAKA,MAAIC,OAAO,GAAGJ,KAAK,CAACJ,KAApB;AACA,MAAIO,MAAM,GAAGF,OAAO,CAACE,MAArB;;AAEA,SAAOC,OAAP,EAAgB;AACd,QAAIA,OAAO,CAACP,MAAR,CAAeC,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,aAAOC,SAAP;AACD;;AAEDC,IAAAA,KAAK,GAAGI,OAAO,CAACP,MAAR,CAAeO,OAAO,CAACP,MAAR,CAAeC,MAAf,GAAwB,CAAvC,CAAR;AACAK,IAAAA,MAAM,CAACE,OAAP,GAAiBD,OAAO,CAACP,MAAR,CAAeC,MAAf,KAA0B,CAA3C;AACAK,IAAAA,MAAM,CAACG,MAAP,GAAgBN,KAAK,CAACE,IAAtB;;AAEA,QAAIF,KAAK,CAACJ,KAAV,EAAiB;AACfO,MAAAA,MAAM,CAACA,MAAP,qBAAqBH,KAAK,CAACG,MAA3B;AACAA,MAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;AACD,KAHD,MAGO;AACLA,MAAAA,MAAM,CAACA,MAAP,GAAgBH,KAAK,CAACG,MAAtB;AACD;;AAEDC,IAAAA,OAAO,GAAGJ,KAAK,CAACJ,KAAhB;AACD;;AAED,SAAO;AACLW,IAAAA,IAAI,EAAE,UADD;AAELN,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import { PartialState, NavigationState } from '@react-navigation/routers';\r\n\r\ntype NavigateParams = {\r\n  screen?: string;\r\n  params?: NavigateParams;\r\n  initial?: boolean;\r\n};\r\n\r\ntype NavigateAction = {\r\n  type: 'NAVIGATE';\r\n  payload: { name: string; params: NavigateParams };\r\n};\r\n\r\nexport default function getActionFromState(\r\n  state: PartialState<NavigationState>\r\n): NavigateAction | undefined {\r\n  if (state.routes.length === 0) {\r\n    return undefined;\r\n  }\r\n\r\n  // Try to construct payload for a `NAVIGATE` action from the state\r\n  // This lets us preserve the navigation state and not lose it\r\n  let route = state.routes[state.routes.length - 1];\r\n\r\n  let payload: { name: string; params: NavigateParams } = {\r\n    name: route.name,\r\n    params: { ...route.params },\r\n  };\r\n\r\n  let current = route.state;\r\n  let params = payload.params;\r\n\r\n  while (current) {\r\n    if (current.routes.length === 0) {\r\n      return undefined;\r\n    }\r\n\r\n    route = current.routes[current.routes.length - 1];\r\n    params.initial = current.routes.length === 1;\r\n    params.screen = route.name;\r\n\r\n    if (route.state) {\r\n      params.params = { ...route.params };\r\n      params = params.params;\r\n    } else {\r\n      params.params = route.params;\r\n    }\r\n\r\n    current = route.state;\r\n  }\r\n\r\n  return {\r\n    type: 'NAVIGATE',\r\n    payload,\r\n  };\r\n}\r\n"]}
{"version":3,"sources":["useDescriptors.tsx"],"names":["React","SceneView","NavigationBuilderContext","useNavigationCache","useDescriptors","state","screens","navigation","screenOptions","onAction","getState","setState","addActionListener","addFocusedListener","addStateGetter","onRouteFocus","router","emitter","options","setOptions","useState","trackAction","useContext","context","useMemo","navigations","routes","reduce","acc","route","screen","name","key","render"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAOA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,wBAAP,MAIO,4BAJP;AAMA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAwCA;;;;;;;;AAQA,eAAe,SAASC,cAAT,CAIb;AACAC,EAAAA,KADA;AAEAC,EAAAA,OAFA;AAGAC,EAAAA,UAHA;AAIAC,EAAAA,aAJA;AAKAC,EAAAA,QALA;AAMAC,EAAAA,QANA;AAOAC,EAAAA,QAPA;AAQAC,EAAAA,iBARA;AASAC,EAAAA,kBATA;AAUAC,EAAAA,cAVA;AAWAC,EAAAA,YAXA;AAYAC,EAAAA,MAZA;AAaAC,EAAAA;AAbA,CAJa,EAkB6B;AAC1C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBnB,KAAK,CAACoB,QAAN,CAAuC,EAAvC,CAA9B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAkBrB,KAAK,CAACsB,UAAN,CAAiBpB,wBAAjB,CAAxB;AAEA,QAAMqB,OAAO,GAAGvB,KAAK,CAACwB,OAAN,CACd,OAAO;AACLjB,IAAAA,UADK;AAELE,IAAAA,QAFK;AAGLG,IAAAA,iBAHK;AAILC,IAAAA,kBAJK;AAKLC,IAAAA,cALK;AAMLC,IAAAA,YANK;AAOLM,IAAAA;AAPK,GAAP,CADc,EAUd,CACEd,UADF,EAEEE,QAFF,EAGEG,iBAHF,EAIEC,kBAJF,EAKEE,YALF,EAMED,cANF,EAOEO,WAPF,CAVc,CAAhB;AAqBA,QAAMI,WAAW,GAAGtB,kBAAkB,CAAuB;AAC3DE,IAAAA,KAD2D;AAE3DK,IAAAA,QAF2D;AAG3DH,IAAAA,UAH2D;AAI3DY,IAAAA,UAJ2D;AAK3DH,IAAAA,MAL2D;AAM3DC,IAAAA;AAN2D,GAAvB,CAAtC;AASA,SAAOZ,KAAK,CAACqB,MAAN,CAAaC,MAAb,CACL,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACd,UAAMC,MAAM,GAAGxB,OAAO,CAACuB,KAAK,CAACE,IAAP,CAAtB;AACA,UAAMxB,UAAU,GAAGkB,WAAW,CAACI,KAAK,CAACG,GAAP,CAA9B;AAEAJ,IAAAA,GAAG,CAACC,KAAK,CAACG,GAAP,CAAH,GAAiB;AACfzB,MAAAA,UADe;;AAEf0B,MAAAA,MAAM,GAAG;AACP,4BACE,oBAAC,wBAAD,CAA0B,QAA1B;AAAmC,UAAA,GAAG,EAAEJ,KAAK,CAACG,GAA9C;AAAmD,UAAA,KAAK,EAAET;AAA1D,wBACE,oBAAC,SAAD;AACE,UAAA,UAAU,EAAEhB,UADd;AAEE,UAAA,KAAK,EAAEsB,KAFT;AAGE,UAAA,MAAM,EAAEC,MAHV;AAIE,UAAA,QAAQ,EAAEpB,QAJZ;AAKE,UAAA,QAAQ,EAAEC;AALZ,UADF,CADF;AAWD,OAdc;;AAefO,MAAAA,OAAO,oBAED,OAAOV,aAAP,KAAyB,QAAzB,IAAqCA,aAAa,IAAI,IAAtD,GACAA,aADA,GAEAA,aAAa,CAAC;AACZ;AACAqB,QAAAA,KAFY;AAGZtB,QAAAA;AAHY,OAAD,CAJZ,MAUD,OAAOuB,MAAM,CAACZ,OAAd,KAA0B,QAA1B,IAAsCY,MAAM,CAACZ,OAAP,IAAkB,IAAxD,GACAY,MAAM,CAACZ,OADP,GAEAY,MAAM,CAACZ,OAAP,CAAe;AACb;AACAW,QAAAA,KAFa;AAGb;AACAtB,QAAAA;AAJa,OAAf,CAZC,MAmBFW,OAAO,CAACW,KAAK,CAACG,GAAP,CAnBL;AAfQ,KAAjB;AAsCA,WAAOJ,GAAP;AACD,GA5CI,EA6CL,EA7CK,CAAP;AAiDD","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  NavigationAction,\r\n  NavigationState,\r\n  ParamListBase,\r\n  Router,\r\n} from '@react-navigation/routers';\r\nimport SceneView from './SceneView';\r\nimport NavigationBuilderContext, {\r\n  ChildActionListener,\r\n  FocusedNavigationListener,\r\n  NavigatorStateGetter,\r\n} from './NavigationBuilderContext';\r\nimport { NavigationEventEmitter } from './useEventEmitter';\r\nimport useNavigationCache from './useNavigationCache';\r\nimport {\r\n  Descriptor,\r\n  NavigationHelpers,\r\n  RouteConfig,\r\n  RouteProp,\r\n  EventMapBase,\r\n} from './types';\r\n\r\ntype Options<\r\n  State extends NavigationState,\r\n  ScreenOptions extends object,\r\n  EventMap extends EventMapBase\r\n> = {\r\n  state: State;\r\n  screens: Record<\r\n    string,\r\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\r\n  >;\r\n  navigation: NavigationHelpers<ParamListBase>;\r\n  screenOptions?:\r\n    | ScreenOptions\r\n    | ((props: {\r\n        route: RouteProp<ParamListBase, string>;\r\n        navigation: any;\r\n      }) => ScreenOptions);\r\n  onAction: (\r\n    action: NavigationAction,\r\n    visitedNavigators?: Set<string>\r\n  ) => boolean;\r\n  getState: () => State;\r\n  setState: (state: State) => void;\r\n  addActionListener: (listener: ChildActionListener) => void;\r\n  addFocusedListener: (listener: FocusedNavigationListener) => void;\r\n  addStateGetter: (key: string, getter: NavigatorStateGetter) => void;\r\n  onRouteFocus: (key: string) => void;\r\n  router: Router<State, NavigationAction>;\r\n  emitter: NavigationEventEmitter;\r\n};\r\n\r\n/**\r\n * Hook to create descriptor objects for the child routes.\r\n *\r\n * A descriptor object provides 3 things:\r\n * - Helper method to render a screen\r\n * - Options specified by the screen for the navigator\r\n * - Navigation object intended for the route\r\n */\r\nexport default function useDescriptors<\r\n  State extends NavigationState,\r\n  ScreenOptions extends object,\r\n  EventMap extends EventMapBase\r\n>({\r\n  state,\r\n  screens,\r\n  navigation,\r\n  screenOptions,\r\n  onAction,\r\n  getState,\r\n  setState,\r\n  addActionListener,\r\n  addFocusedListener,\r\n  addStateGetter,\r\n  onRouteFocus,\r\n  router,\r\n  emitter,\r\n}: Options<State, ScreenOptions, EventMap>) {\r\n  const [options, setOptions] = React.useState<Record<string, object>>({});\r\n  const { trackAction } = React.useContext(NavigationBuilderContext);\r\n\r\n  const context = React.useMemo(\r\n    () => ({\r\n      navigation,\r\n      onAction,\r\n      addActionListener,\r\n      addFocusedListener,\r\n      addStateGetter,\r\n      onRouteFocus,\r\n      trackAction,\r\n    }),\r\n    [\r\n      navigation,\r\n      onAction,\r\n      addActionListener,\r\n      addFocusedListener,\r\n      onRouteFocus,\r\n      addStateGetter,\r\n      trackAction,\r\n    ]\r\n  );\r\n\r\n  const navigations = useNavigationCache<State, ScreenOptions>({\r\n    state,\r\n    getState,\r\n    navigation,\r\n    setOptions,\r\n    router,\r\n    emitter,\r\n  });\r\n\r\n  return state.routes.reduce(\r\n    (acc, route) => {\r\n      const screen = screens[route.name];\r\n      const navigation = navigations[route.key];\r\n\r\n      acc[route.key] = {\r\n        navigation,\r\n        render() {\r\n          return (\r\n            <NavigationBuilderContext.Provider key={route.key} value={context}>\r\n              <SceneView\r\n                navigation={navigation}\r\n                route={route}\r\n                screen={screen}\r\n                getState={getState}\r\n                setState={setState}\r\n              />\r\n            </NavigationBuilderContext.Provider>\r\n          );\r\n        },\r\n        options: {\r\n          // The default `screenOptions` passed to the navigator\r\n          ...(typeof screenOptions === 'object' || screenOptions == null\r\n            ? screenOptions\r\n            : screenOptions({\r\n                // @ts-ignore\r\n                route,\r\n                navigation,\r\n              })),\r\n          // The `options` prop passed to `Screen` elements\r\n          ...(typeof screen.options === 'object' || screen.options == null\r\n            ? screen.options\r\n            : screen.options({\r\n                // @ts-ignore\r\n                route,\r\n                // @ts-ignore\r\n                navigation,\r\n              })),\r\n          // The options set via `navigation.setOptions`\r\n          ...options[route.key],\r\n        },\r\n      };\r\n\r\n      return acc;\r\n    },\r\n    {} as {\r\n      [key: string]: Descriptor<ParamListBase, string, State, ScreenOptions>;\r\n    }\r\n  );\r\n}\r\n"]}
{"version":3,"sources":["useLinking.native.tsx"],"names":["React","Linking","Platform","getActionFromState","getStateFromPath","getStateFromPathDefault","isUsingLinking","useLinking","ref","prefixes","config","useEffect","Error","OS","prefixesRef","useRef","configRef","getStateFromPathRef","current","extractPathFromURL","useCallback","url","prefix","startsWith","replace","undefined","getInitialState","getInitialURL","path","listener","navigation","state","action","dispatch","resetRoot","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Linking, Platform } from 'react-native';\r\nimport {\r\n  getActionFromState,\r\n  getStateFromPath as getStateFromPathDefault,\r\n  NavigationContainerRef,\r\n} from '@react-navigation/core';\r\nimport { LinkingOptions } from './types';\r\n\r\nlet isUsingLinking = false;\r\n\r\nexport default function useLinking(\r\n  ref: React.RefObject<NavigationContainerRef>,\r\n  {\r\n    prefixes,\r\n    config,\r\n    getStateFromPath = getStateFromPathDefault,\r\n  }: LinkingOptions\r\n) {\r\n  React.useEffect(() => {\r\n    if (isUsingLinking) {\r\n      throw new Error(\r\n        \"Looks like you are using 'useLinking' in multiple components. This is likely an error since deep links should only be handled in one place to avoid conflicts.\" +\r\n          (Platform.OS === 'android'\r\n            ? \"\\n\\nIf you're not using it in multiple components, ensure that you have set 'android:launchMode=singleTask' in the '<activity />' section of the 'AndroidManifest.xml' file to avoid launching multiple activities which run multiple instances of the root component.\"\r\n            : '')\r\n      );\r\n    } else {\r\n      isUsingLinking = true;\r\n    }\r\n\r\n    return () => {\r\n      isUsingLinking = false;\r\n    };\r\n  });\r\n\r\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\r\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\r\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\r\n  const prefixesRef = React.useRef(prefixes);\r\n  const configRef = React.useRef(config);\r\n  const getStateFromPathRef = React.useRef(getStateFromPath);\r\n\r\n  React.useEffect(() => {\r\n    prefixesRef.current = prefixes;\r\n    configRef.current = config;\r\n    getStateFromPathRef.current = getStateFromPath;\r\n  }, [config, getStateFromPath, prefixes]);\r\n\r\n  const extractPathFromURL = React.useCallback((url: string) => {\r\n    for (const prefix of prefixesRef.current) {\r\n      if (url.startsWith(prefix)) {\r\n        return url.replace(prefix, '');\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }, []);\r\n\r\n  const getInitialState = React.useCallback(async () => {\r\n    const url = await Linking.getInitialURL();\r\n    const path = url ? extractPathFromURL(url) : null;\r\n\r\n    if (path) {\r\n      return getStateFromPathRef.current(path, configRef.current);\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }, [extractPathFromURL]);\r\n\r\n  React.useEffect(() => {\r\n    const listener = ({ url }: { url: string }) => {\r\n      const path = extractPathFromURL(url);\r\n      const navigation = ref.current;\r\n\r\n      if (navigation && path) {\r\n        const state = getStateFromPathRef.current(path, configRef.current);\r\n\r\n        if (state) {\r\n          const action = getActionFromState(state);\r\n\r\n          if (action !== undefined) {\r\n            navigation.dispatch(action);\r\n          } else {\r\n            navigation.resetRoot(state);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    Linking.addEventListener('url', listener);\r\n\r\n    return () => Linking.removeEventListener('url', listener);\r\n  }, [extractPathFromURL, ref]);\r\n\r\n  return {\r\n    getInitialState,\r\n  };\r\n}\r\n"]}